{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"statdesign","text":"<p><code>statdesign</code> provides deterministic power and sample size calculations for common clinical and translational study designs. Every calculation is exposed through a well-typed Python API and a streamlined CLI so you can integrate power checks into notebooks, CI pipelines, or handoff documents without touching spreadsheets.</p>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>Analytic solutions for proportions, means, one-way ANOVA, and exponential   survival models.</li> <li>Optional SciPy integration (<code>STATDESIGN_AUTO_SCIPY=1</code>) enables exact   noncentral \\(t\\)/\\(F\\) distributions while the default install stays lightweight   using conservative normal approximations.</li> <li>Consistent input validation with rich error messages and JSON-friendly CLI   output for automation.</li> <li>Test suite with &gt;70% coverage, parity checks against R <code>pwr</code>/G*Power, and   property tests to guard monotonicity.</li> <li>MkDocs material documentation, parity tables, and reproducible scripts for   generating published tables.</li> </ul> <p>Use the navigation sidebar to explore installation instructions, quickstart examples, theoretical notes, and an auto-generated API reference.</p>"},{"location":"api/","title":"API Reference","text":"<p>This page provides detailed documentation for all public functions in the statdesign package.</p>"},{"location":"api/#main-functions","title":"Main Functions","text":""},{"location":"api/#statdesign.n_two_prop","title":"<code>statdesign.n_two_prop(p1, p2, alpha=0.05, power=0.8, ratio=1.0, test='z', tail='two-sided', ni_margin=None, ni_type=None, exact=False)</code>","text":""},{"location":"api/#statdesign.n_one_sample_prop","title":"<code>statdesign.n_one_sample_prop(p, p0, alpha=0.05, power=0.8, tail='two-sided', exact=False, ni_margin=None, ni_type=None)</code>","text":""},{"location":"api/#statdesign.n_mean","title":"<code>statdesign.n_mean(mu1, mu2, sd, alpha=0.05, power=0.8, ratio=1.0, test='t', tail='two-sided', ni_margin=None, ni_type=None)</code>","text":""},{"location":"api/#statdesign.n_one_sample_mean","title":"<code>statdesign.n_one_sample_mean(delta, sd, alpha=0.05, power=0.8, tail='two-sided', test='t', ni_margin=None, ni_type=None)</code>","text":""},{"location":"api/#statdesign.n_paired","title":"<code>statdesign.n_paired(delta, sd_diff, alpha=0.05, power=0.8, tail='two-sided', ni_margin=None, ni_type=None)</code>","text":""},{"location":"api/#statdesign.n_anova","title":"<code>statdesign.n_anova(k_groups, effect_f, alpha=0.05, power=0.8, allocation=None)</code>","text":""},{"location":"api/#survival-analysis","title":"Survival Analysis","text":""},{"location":"api/#statdesign.required_events_logrank","title":"<code>statdesign.required_events_logrank(hr, alpha=0.05, power=0.8, allocation=0.5, tail='two-sided')</code>","text":""},{"location":"api/#statdesign.required_events_cox","title":"<code>statdesign.required_events_cox(log_hr, var_x, alpha=0.05, power=0.8, tail='two-sided')</code>","text":""},{"location":"api/#statdesign.events_to_n_exponential","title":"<code>statdesign.events_to_n_exponential(events_required, accrual_years, followup_years, base_hazard_ctrl, hr, allocation=0.5, dropout_hazard=0.0, entry_distribution='uniform')</code>","text":""},{"location":"api/#statdesign.power_logrank_from_n","title":"<code>statdesign.power_logrank_from_n(hr, n_exp, n_ctrl, accrual_years, followup_years, base_hazard_ctrl, dropout_hazard=0.0, entry_distribution='uniform', alpha=0.05, tail='two-sided')</code>","text":""},{"location":"api/#design-effects","title":"Design Effects","text":""},{"location":"api/#statdesign.design_effect_cluster_equal","title":"<code>statdesign.design_effect_cluster_equal(m, icc)</code>","text":""},{"location":"api/#statdesign.design_effect_cluster_unequal","title":"<code>statdesign.design_effect_cluster_unequal(mbar, icc, cv)</code>","text":""},{"location":"api/#statdesign.design_effect_repeated_cs","title":"<code>statdesign.design_effect_repeated_cs(k, icc)</code>","text":""},{"location":"api/#statdesign.inflate_n_by_de","title":"<code>statdesign.inflate_n_by_de(n_individuals, de)</code>","text":""},{"location":"api/#multiple-testing","title":"Multiple Testing","text":""},{"location":"api/#statdesign.alpha_adjust","title":"<code>statdesign.alpha_adjust(m, alpha=0.05, method='bonferroni')</code>","text":""},{"location":"api/#statdesign.bh_thresholds","title":"<code>statdesign.bh_thresholds(m, alpha=0.05)</code>","text":""},{"location":"cli/","title":"CLI Reference","text":"<p>The package installs a single entry point <code>statdesign</code>. Global flags control the output format:</p> <ul> <li><code>--json/--no-json</code> (default <code>--json</code>) emits machine-friendly JSON payloads.</li> <li><code>--table/--no-table</code> renders a human table. When stdout is a TTY the table is   prettified with Rich (if installed), otherwise a GitHub-flavoured table is   returned.</li> </ul> <p>Example:</p> <pre><code>statdesign n_two_prop --p1 0.6 --p2 0.5 --alpha 0.05 --power 0.8\n{\"n1\":389,\"n2\":389}\n\nstatdesign --no-json --table alpha_adjust --m 4 --alpha 0.04 --method bh\n| key        | value                  |\n|------------|------------------------|\n| thresholds | 0.01, 0.02, 0.03, 0.04 |\n</code></pre> <p>Every public API function is mirrored by a subcommand:</p> Command Maps to Notes <code>n_two_prop</code> <code>statdesign.n_two_prop</code> Supports normal and exact tests plus NI/TOST margins <code>n_one_sample_prop</code> <code>statdesign.n_one_sample_prop</code> Exact enumeration for small \\(n\\) <code>n_mean</code> <code>statdesign.n_mean</code> <code>--test</code> accepts <code>z</code> or <code>t</code> with fallback cushion <code>n_one_sample_mean</code> <code>statdesign.n_one_sample_mean</code> <code>n_paired</code> <code>statdesign.n_paired</code> <code>n_anova</code> <code>statdesign.n_anova</code> <code>--allocation</code> takes comma-separated weights <code>alpha_adjust</code> <code>statdesign.alpha_adjust</code> / <code>bh_thresholds</code> <code>--method bh</code> emits thresholds <code>bh_thresholds</code> <code>statdesign.bh_thresholds</code> Shortcut when only BH cutoffs are needed <p>Errors are emitted on stderr with exit code <code>2</code> for invalid inputs and <code>3</code> for unavailable approximations (e.g. requesting exact noncentral calculations without SciPy). Use <code>statdesign COMMAND --help</code> for detailed per-command options.</p>"},{"location":"install/","title":"Installation","text":"<p>The project targets Python 3.9 and newer. Once the first release is published on PyPI the preferred installation will be:</p> <pre><code>pip install statdesign\n</code></pre> <p>Until then, install from TestPyPI or a local checkout:</p> <pre><code>pip install -i https://test.pypi.org/simple/ statdesign\n</code></pre> <p>Optional extras expose development tooling:</p> <pre><code>pip install \"statdesign[cli]\"     # Typer CLI with rich/table formatting\npip install \"statdesign[tests]\"   # pytest, hypothesis, coverage helpers\npip install \"statdesign[docs]\"    # MkDocs Material + mkdocstrings\npip install \"statdesign[full]\"    # SciPy paths + CLI extras\n</code></pre> <p>SciPy is intentionally optional. To enable exact noncentral distributions set <code>STATDESIGN_AUTO_SCIPY=1</code> in an environment where <code>scipy</code> is installed. Without SciPy the package falls back to conservative normal approximations.</p>"},{"location":"quickstart/","title":"Quickstart (Python API)","text":"<pre><code>from statdesign import n_two_prop, n_mean, alpha_adjust\n\n# Two-sample proportions (normal approximation).\nn1, n2 = n_two_prop(p1=0.60, p2=0.50, alpha=0.05, power=0.80)\nprint(n1, n2)  # 389 389\n\n# Two-sample means with a conservative t-approximation fallback.\nn1, n2 = n_mean(mu1=0.0, mu2=0.5, sd=1.0, ratio=1.0, test=\"t\")\nprint(n1, n2)  # 64 64 when SciPy is available or via the fallback cushion\n\n# Family-wise error control for multiple hypotheses.\nper_test_alpha = alpha_adjust(m=8, method=\"bonferroni\")\n</code></pre>"},{"location":"quickstart/#scipy-backed-distributions","title":"SciPy-backed distributions","text":"<p>Activate SciPy support when you need exact noncentral \\(t\\) or \\(F\\) behaviour:</p> <pre><code>export STATDESIGN_AUTO_SCIPY=1\npip install \"statdesign[full]\"  # ensures SciPy is available\n</code></pre> <p>When SciPy is unavailable the package uses normal approximations and inflates sample sizes slightly to remain conservative. The documentation details when approximations are adequate and when you should enable SciPy.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#python-api","title":"Python API","text":"<pre><code>from statdesign import (\n    n_two_prop,\n    n_one_sample_prop,\n    n_mean,\n    n_one_sample_mean,\n    n_paired,\n    n_anova,\n    alpha_adjust,\n)\n\n# Normal-approximation for two independent proportions\nn1, n2 = n_two_prop(p1=0.60, p2=0.50, alpha=0.05, power=0.80, ratio=1.0)\n\n# One-sample proportion with an exact binomial inversion\nn_exact = n_one_sample_prop(p=0.65, p0=0.50, exact=True)\n\n# Two-sample means (z-approximation)\nn1, n2 = n_mean(mu1=0.0, mu2=0.5, sd=1.0, test=\"z\", ratio=1.5)\n\n# Enable SciPy-backed calculations when available\nimport os\nos.environ[\"STATDESIGN_AUTO_SCIPY\"] = \"1\"\nn_pairs = n_paired(delta=0.4, sd_diff=1.1, power=0.85)\n</code></pre> <p>All functions validate arguments and return integer sample sizes.</p>"},{"location":"usage/#cli","title":"CLI","text":"<pre><code>statdesign n_two_prop --p1 0.6 --p2 0.5 --alpha 0.05 --power 0.8\nstatdesign n_one_sample_prop --p 0.65 --p0 0.50 --exact\nstatdesign n_mean --mu1 0 --mu2 0.5 --sd 1.0 --test z\nstatdesign alpha_adjust --m 12 --method bh\n</code></pre> <p>Every subcommand prints JSON\u2014handy for piping the output into other tooling.</p>"},{"location":"usage/#multiple-testing-utilities","title":"Multiple testing utilities","text":"<pre><code>from statdesign import alpha_adjust, bh_thresholds\n\nper_test_alpha = alpha_adjust(m=4, method=\"bonferroni\")  # 0.0125\nbh_steps = bh_thresholds(5, alpha=0.05)  # [0.01, 0.02, 0.03, 0.04, 0.05]\n</code></pre> <p>Refer to <code>docs/approximations.md</code> for detailed formulas and limits used by each function.</p>"},{"location":"parity/","title":"Parity checks","text":"<p>CSV files in this directory capture parity comparisons against reference tools (R's <code>pwr</code> package and G*Power). Each file stores both the external reference value and the corresponding output from <code>statdesign</code>. The slow parity tests in <code>tests/test_parity_numbers.py</code> load these tables and validate that the statdesign values remain in sync with the references.</p> <p>To regenerate the numbers, run the scripts in this directory (or the notebook used in CI) within an environment where SciPy is enabled.</p>"},{"location":"parity/anova/","title":"Parity Table","text":"Scenario Reference n statdesign n k=4, f=0.25 180 202 k=3, f=0.35, weights=1,1,2 132 143"},{"location":"parity/means/","title":"Parity Table","text":"Scenario Reference n1 statdesign n1 Reference n2 statdesign n2 \u03bc1=0.0, \u03bc2=0.5, \u03c3=1.0, test=t 64 64 64 64 \u03bc1=1.0, \u03bc2=1.3, \u03c3=0.8, test=z 155 155 233 233"},{"location":"parity/one_sample_means/","title":"Parity Table","text":"Scenario Reference n statdesign n \u0394=0.5, \u03c3=1.0, test=t 34 34 \u0394=0.4, \u03c3=0.9, test=z 37 37"},{"location":"parity/paired_means/","title":"Parity Table","text":"Scenario Reference n statdesign n \u0394=0.5, \u03c3_d=1.0 34 34"},{"location":"parity/survival/","title":"Parity Table","text":"Scenario Reference events statdesign events HR=0.7, allocation=0.5 246.787 246.787 HR=0.8, allocation=0.6 879.258 879.258 HR=1.3, allocation=0.5 417.77 417.77"},{"location":"parity/two_proportions/","title":"Parity Table","text":"Scenario Reference n1 statdesign n1 Reference n2 statdesign n2 p1=0.6, p2=0.5, exact=False 389 389 389 389 p1=0.7, p2=0.6, exact=False 404 404 606 606 p1=0.45, p2=0.5, exact=False 1613 1613 1291 1291 p1=0.6, p2=0.58, exact=False 1038 12709 1038 12709"}]}