Metadata-Version: 2.4
Name: statdesign
Version: 0.1.0
Summary: Deterministic power and sample size calculations with a unified Python API and CLI.
Author: Altalanta
License: MIT
Project-URL: Homepage, https://github.com/altalanta/statdesign
Project-URL: Documentation, https://altalanta.github.io/statdesign/
Project-URL: Issues, https://github.com/altalanta/statdesign/issues
Project-URL: Source, https://github.com/altalanta/statdesign
Keywords: statistics,power,sample size,clinical trials,design
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: License :: OSI Approved :: MIT License
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: cli
Requires-Dist: typer>=0.9.0; extra == "cli"
Requires-Dist: rich>=13.7; extra == "cli"
Requires-Dist: tabulate>=0.9.0; extra == "cli"
Provides-Extra: docs
Requires-Dist: mkdocs>=1.5; extra == "docs"
Requires-Dist: mkdocs-material>=9.5; extra == "docs"
Requires-Dist: mkdocstrings[python]>=0.24; extra == "docs"
Requires-Dist: mkdocs-section-index>=0.3; extra == "docs"
Requires-Dist: mkdocs-literate-nav>=0.6; extra == "docs"
Requires-Dist: mkdocs-gen-files>=0.5; extra == "docs"
Provides-Extra: tests
Requires-Dist: pytest>=7.4; extra == "tests"
Requires-Dist: pytest-cov>=4.1; extra == "tests"
Requires-Dist: pytest-regressions>=2.5; extra == "tests"
Requires-Dist: hypothesis>=6.98; extra == "tests"
Requires-Dist: ruff>=0.4.4; extra == "tests"
Requires-Dist: mypy>=1.10; extra == "tests"
Requires-Dist: bandit[toml]>=1.7; extra == "tests"
Requires-Dist: typer>=0.9.0; extra == "tests"
Requires-Dist: types-tabulate; extra == "tests"
Provides-Extra: full
Requires-Dist: scipy>=1.11; extra == "full"
Requires-Dist: numpy>=1.23; extra == "full"
Requires-Dist: typer>=0.9.0; extra == "full"
Requires-Dist: rich>=13.7; extra == "full"
Requires-Dist: tabulate>=0.9.0; extra == "full"
Dynamic: license-file

# statdesign

Deterministic power and sample-size utilities with a single Python API and CLI.

## Install

```bash
pip install statdesign
```

The library relies on analytical formulae for normal approximations. When
`t`/`F`-based designs are required, enable SciPy in a compatible environment by
setting `STATDESIGN_AUTO_SCIPY=1` before calling the API.

## Library usage

```python
from statdesign import n_two_prop, n_mean, n_anova, alpha_adjust

# Two-sample proportions (normal approximation)
n1, n2 = n_two_prop(p1=0.60, p2=0.50, power=0.80)

# Two-sample means with unequal allocation using the z-approximation
n1, n2 = n_mean(mu1=0.0, mu2=0.5, sd=1.0, ratio=1.5, test="z")

# Multiple testing helper
per_test_alpha = alpha_adjust(m=8, method="bonferroni")
```

All core APIs live in `statdesign.api` and are re-exported at the package root.
Functions guard their inputs and raise informative errors for unsupported
configurations (e.g. exact binomial with very large samples).

## CLI quickstart

```bash
statdesign n_two_prop --p1 0.6 --p2 0.5 --alpha 0.05 --power 0.8
statdesign alpha_adjust --m 12 --method bh
```

Every API function is mirrored by a subcommand. Results are emitted as JSON so
shell pipelines can consume them directly.

## Endpoints

- `n_two_prop` / `n_one_sample_prop` with optional non-inferiority/equivalence
  margins and exact small-sample support.
- `n_mean`, `n_one_sample_mean`, `n_paired` (normal approximation by default,
  optional SciPy-backed noncentral t when available).
- `n_anova` using Cohen's *f* (requires SciPy for noncentral F).
- `alpha_adjust` and `bh_thresholds` for Bonferroni and Benjaminiâ€“Hochberg.

Golden files cover the primary scenarios and doc examples provide parity tables
against R's `pwr` / G*Power values.

## Development

```bash
pip install -e ".[tests,docs]"
pytest
STATDESIGN_AUTO_SCIPY=1 pytest  # enable SciPy backed paths when available
mkdocs serve
```

Coverage thresholds are enforced at 95% on `statdesign/`.
